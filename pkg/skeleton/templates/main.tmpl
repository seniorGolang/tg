package main

import (
    "context"
    "os"
    "os/signal"
    "syscall"

    _ "github.com/KimMachineGun/automemlimit"
    "github.com/rs/zerolog/log"
    _ "go.uber.org/automaxprocs"

    "{{.moduleName}}/internal/services/{{.serviceName}}"
    "{{.moduleName}}/internal/transport"
    "{{.moduleName}}/internal/utils"
    "{{.moduleName}}/internal/utils/header"

    "{{.moduleName}}/internal/config"
)

const (
    serviceName = "{{.serviceName}}"
)

func main() {

    log.Logger = config.Service().Logger()
    ctx := log.Logger.WithContext(context.Background())

    shutdown := make(chan os.Signal, 1)
    signal.Notify(shutdown, syscall.SIGINT)

    log.Info().Str("service", serviceName).Msg("start service")
    defer log.Info().Msg("shutdown server")

    liveness := utils.NewHealth("/liveness", "ok")
    liveness.Start(ctx, config.Service().LivenessBind)
    defer liveness.Stop(ctx)

    svc{{.serviceNameCamel}} := {{.serviceName}}.New()

    services := []transport.Option{
        transport.WithRequestID(header.XRequestID.String()),
        transport.{{.serviceNameCamel}}(transport.New{{.serviceNameCamel}}(svc{{.serviceNameCamel}})),
    }

    srv := transport.New(log.Logger, services...).WithMetrics().WithLog()

    readiness := utils.NewHealth("/readiness", "ok")
    readiness.Start(ctx, config.Service().ReadinessBind)
    defer readiness.Stop(ctx)

    srv.ServeMetrics(log.Logger, "/", config.Service().MetricsBind)

    go func() {
        log.Info().Str("bind", config.Service().Bind).Msg("listen on")
        if err := srv.Fiber().Listen(config.Service().Bind); err != nil {
            log.Panic().Err(err).Stack().Msg("server error")
        }
    }()

    <-shutdown
}
