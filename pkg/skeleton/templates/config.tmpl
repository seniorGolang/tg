package config

import (
    "io"
    "os"
    "time"

    "github.com/kelseyhightower/envconfig"
    "github.com/rs/zerolog"
    "github.com/rs/zerolog/pkgerrors"
)

const FormatJSON = "json"

type CfgService struct {
    LogLevel     string `envconfig:"LOG_LEVEL" default:"info"`
    LogFormat    string `envconfig:"LOG_FORMAT" default:"console"`
    ReportCaller bool   `envconfig:"LOG_REPORT_CALLER" default:"false"`

    Bind          string `envconfig:"BIND_SERVICE" default:":9000"`
    MetricsBind   string `envconfig:"BIND_METRICS" default:":9090"`
    LivenessBind  string `envconfig:"BIND_LIVENESS" default:":9091"`
    ReadinessBind string `envconfig:"BIND_READINESS" default:":9092"`
}

var service *CfgService

func Service() CfgService {

    if service != nil {
        return *service
    }
    service = &CfgService{}
    if err := envconfig.Process("", service); err != nil {
        panic(err)
    }
    return *service
}

func (cfg CfgService) Logger() (logger zerolog.Logger) {

    level := zerolog.InfoLevel
    if newLevel, err := zerolog.ParseLevel(cfg.LogLevel); err == nil {
        level = newLevel
    }
    var out io.Writer = os.Stdout
    if cfg.LogFormat != FormatJSON {
        out = zerolog.ConsoleWriter{Out: os.Stdout, TimeFormat: time.StampMicro}
    }
    zerolog.ErrorStackMarshaler = pkgerrors.MarshalStack // nolint:reassign
    ctxLog := zerolog.New(out).Level(level).With().Timestamp().Stack()
    if cfg.ReportCaller {
        ctxLog = ctxLog.Caller()
    }
    return ctxLog.Logger()
}
