package utils

import (
    "context"

    "github.com/gofiber/fiber/v2"
    "github.com/rs/zerolog/log"

    "{{.moduleName}}/pkg/errors"
)

type Health struct {
    srv *fiber.App
}

func NewHealth(path string, response any) (health Health) {

    health = Health{srv: fiber.New(fiber.Config{DisableStartupMessage: true})}
    health.srv.Get(path, func(ftx *fiber.Ctx) (err error) {
        return ftx.JSON(response)
    })
    return
}

func (health Health) Start(ctx context.Context, address string) {

    go func() {
        err := health.srv.Listen(address)
        errors.ExitOnError(ctx, err, "serve health on "+address)
    }()
}

func (health Health) Stop(ctx context.Context) {

    if health.srv != nil {
        if err := health.srv.Shutdown(); err != nil {
            log.Ctx(ctx).Error().Err(err).Msg("shutdown health check")
        }
    }
}
