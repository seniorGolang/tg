// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/seniorGolang/dumper/viewer"

	"github.com/seniorGolang/tg/v2/example/interfaces"
	"github.com/seniorGolang/tg/v2/example/interfaces/types"
)

type loggerUser struct {
	next interfaces.User
	log  zerolog.Logger
}

func loggerMiddlewareUser(log zerolog.Logger) MiddlewareUser {
	return func(next interfaces.User) interfaces.User {
		return &loggerUser{
			log:  log,
			next: next,
		}
	}
}

func (m loggerUser) GetUser(ctx context.Context, cookie string, userAgent string) (user *types.User, err error) {
	log := m.log.With().Str("service", "User").Str("method", "getUser").Logger()
	if ctx.Value(headerRequestID) != nil {
		log = log.With().Interface("requestID", ctx.Value(headerRequestID)).Logger()
	}
	if ctx.Value("X-Forwarded-For") != nil {
		log = log.With().Interface("ips", ctx.Value("X-Forwarded-For")).Logger()
	}
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request": viewer.Sprintf("%+v", requestUserGetUser{
				Cookie:    cookie,
				UserAgent: userAgent,
			}),
			"response": viewer.Sprintf("%+v", responseUserGetUser{User: user}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			log.Error().Err(err).Fields(fields).Msg("call getUser")
			return
		}
		log.Info().Fields(fields).Msg("call getUser")
	}(time.Now())
	return m.next.GetUser(ctx, cookie, userAgent)
}

func (m loggerUser) UploadFile(ctx context.Context, fileBytes []byte) (err error) {
	log := m.log.With().Str("service", "User").Str("method", "uploadFile").Logger()
	if ctx.Value(headerRequestID) != nil {
		log = log.With().Interface("requestID", ctx.Value(headerRequestID)).Logger()
	}
	if ctx.Value("X-Forwarded-For") != nil {
		log = log.With().Interface("ips", ctx.Value("X-Forwarded-For")).Logger()
	}
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request":  viewer.Sprintf("%+v", requestUserUploadFile{FileBytes: fileBytes}),
			"response": viewer.Sprintf("%+v", responseUserUploadFile{}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			log.Error().Err(err).Fields(fields).Msg("call uploadFile")
			return
		}
		log.Info().Fields(fields).Msg("call uploadFile")
	}(time.Now())
	return m.next.UploadFile(ctx, fileBytes)
}

func (m loggerUser) CustomResponse(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (err error) {
	log := m.log.With().Str("service", "User").Str("method", "customResponse").Logger()
	if ctx.Value(headerRequestID) != nil {
		log = log.With().Interface("requestID", ctx.Value(headerRequestID)).Logger()
	}
	if ctx.Value("X-Forwarded-For") != nil {
		log = log.With().Interface("ips", ctx.Value("X-Forwarded-For")).Logger()
	}
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request": viewer.Sprintf("%+v", requestUserCustomResponse{
				Arg0: arg0,
				Arg1: arg1,
				Opts: opts,
			}),
			"response": viewer.Sprintf("%+v", responseUserCustomResponse{}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			log.Error().Err(err).Fields(fields).Msg("call customResponse")
			return
		}
		log.Info().Fields(fields).Msg("call customResponse")
	}(time.Now())
	return m.next.CustomResponse(ctx, arg0, arg1, opts...)
}

func (m loggerUser) CustomHandler(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (err error) {
	log := m.log.With().Str("service", "User").Str("method", "customHandler").Logger()
	if ctx.Value(headerRequestID) != nil {
		log = log.With().Interface("requestID", ctx.Value(headerRequestID)).Logger()
	}
	if ctx.Value("X-Forwarded-For") != nil {
		log = log.With().Interface("ips", ctx.Value("X-Forwarded-For")).Logger()
	}
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request": viewer.Sprintf("%+v", requestUserCustomHandler{
				Arg0: arg0,
				Arg1: arg1,
				Opts: opts,
			}),
			"response": viewer.Sprintf("%+v", responseUserCustomHandler{}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			log.Error().Err(err).Fields(fields).Msg("call customHandler")
			return
		}
		log.Info().Fields(fields).Msg("call customHandler")
	}(time.Now())
	return m.next.CustomHandler(ctx, arg0, arg1, opts...)
}
