// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/seniorGolang/tg/v2/example/interfaces"
	"github.com/seniorGolang/tg/v2/example/interfaces/types"
	"github.com/seniorGolang/tg/v2/example/transport/viewer"
	"time"
)

type loggerUser struct {
	next interfaces.User
}

func loggerMiddlewareUser() MiddlewareUser {
	return func(next interfaces.User) interfaces.User {
		return &loggerUser{next: next}
	}
}

func (m loggerUser) GetUser(ctx context.Context, cookie string, userAgent string) (user *types.User, err error) {
	logger := log.Ctx(ctx).With().Str("service", "User").Str("method", "getUser").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "user.getUser",
				"request": viewer.Sprintf("%+v", requestUserGetUser{
					Cookie:    cookie,
					UserAgent: userAgent,
				}),
				"response": viewer.Sprintf("%+v", responseUserGetUser{User: user}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getUser")
			return
		}
		logger.Info().Func(logHandle).Msg("call getUser")
	}(time.Now())
	return m.next.GetUser(ctx, cookie, userAgent)
}

func (m loggerUser) CustomResponse(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "User").Str("method", "customResponse").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "user.customResponse",
				"request": viewer.Sprintf("%+v", requestUserCustomResponse{
					Arg0: arg0,
					Arg1: arg1,
					Opts: opts,
				}),
				"response": viewer.Sprintf("%+v", responseUserCustomResponse{}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call customResponse")
			return
		}
		logger.Info().Func(logHandle).Msg("call customResponse")
	}(time.Now())
	return m.next.CustomResponse(ctx, arg0, arg1, opts...)
}

func (m loggerUser) CustomHandler(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "User").Str("method", "customHandler").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "user.customHandler",
				"request": viewer.Sprintf("%+v", requestUserCustomHandler{
					Arg0: arg0,
					Arg1: arg1,
					Opts: opts,
				}),
				"response": viewer.Sprintf("%+v", responseUserCustomHandler{}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call customHandler")
			return
		}
		logger.Info().Func(logHandle).Msg("call customHandler")
	}(time.Now())
	return m.next.CustomHandler(ctx, arg0, arg1, opts...)
}
