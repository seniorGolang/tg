// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/seniorGolang/dumper/viewer"

	"github.com/seniorGolang/tg/v2/example/interfaces"
)

type loggerExampleRPC struct {
	next interfaces.ExampleRPC
	log  zerolog.Logger
}

func loggerMiddlewareExampleRPC(log zerolog.Logger) MiddlewareExampleRPC {
	return func(next interfaces.ExampleRPC) interfaces.ExampleRPC {
		return &loggerExampleRPC{
			log:  log,
			next: next,
		}
	}
}

func (m loggerExampleRPC) Test(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (ret1 int, ret2 string, err error) {
	log := m.log.With().Str("service", "ExampleRPC").Str("method", "test").Logger()
	if ctx.Value(headerRequestID) != nil {
		log = log.With().Interface("requestID", ctx.Value(headerRequestID)).Logger()
	}
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request": viewer.Sprintf("%+v", requestExampleRPCTest{
				Arg0: arg0,
				Arg1: arg1,
				Opts: opts,
			}),
			"response": viewer.Sprintf("%+v", responseExampleRPCTest{
				Ret1: ret1,
				Ret2: ret2,
			}),
			"took": time.Since(begin).String(),
		}
		if err != nil {
			log.Error().Err(err).Fields(fields).Msg("call test")
			return
		}
		log.Info().Fields(fields).Msg("call test")
	}(time.Now())
	return m.next.Test(ctx, arg0, arg1, opts...)
}
